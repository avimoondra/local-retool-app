id: getOrganization
type: datasource
subtype: SqlQuery
resourceName: '[dev] internal_retool (readonly)'
template:
  ordered:
    - queryRefreshTime: ''
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: 0
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: |-
        select
          organizations.*,
          plans.name as "planName"
        from
          organizations
          left join plans on organizations."planId" = plans.id
        where
          organizations.id = {{ table1.selectedRow.data.organizationId }}
    - playgroundQueryUuid: ''
    - playgroundQueryId: 0
    - privateParams: []
    - triggersOnSuccess: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - showSuccessConfetti: false
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - metadata: null
    - triggersOnFailure: []
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - importedQueryInputDefaults:
        ordered: []
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - enableCaching: false
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - queryThrottleTime: '750'
    - notificationDuration: ''
createdAt: '2019-02-08T11:54:03.280Z'
updatedAt: '2019-11-27T23:44:50.095Z'
